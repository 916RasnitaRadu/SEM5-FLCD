N = {program, statement_list, statement_list', compound_statement, statement, statement', simple_statement, structure_statement, declaration, primitive_declaration, array_declaration, simple_type, assignment_statement, if_statement, else_part, while_statement, read_statement, write_statement, term, term', addop, factor, ar_expression, ar_expression', mulop, condition, relop, add_expression, add_expression', subtract_expression, subtract_expression', multiply_expression, multiply_expression', divide_expression, divide_expression', mod_expression, mod_expression'}
E = {start, ;, {, }, +, -, *, /, ), (, read, write, IDENTIFIER, CONST, add, sub, mul, mod, div, array, [, ], =, if, else, while, int, string, char, <, <=, ==, !=, =>, >}
S = program
P = {
    program -> start compound_statement,
    statement_list -> statement statement_list' | E,
    statement_list' -> ; statement statement_list' | E,
    compound_statement -> { statement_list },
    statement -> simple_statement statement',
    statement' -> ; simple_statement statement' | E,
    simple_statement -> declaration | assignment_statement | read_statement | write_statement | structure_statement,
    structure_statement -> if_statement | while_statement,
    declaration -> primitive_declaration | array_declaration,
    primitive_declaration -> simple_type IDENTIFIER,
    array_declaration -> array simple_type IDENTIFIER [ ],
    simple_type -> int | string | char,
    assignment_statement -> IDENTIFIER = ar_expression,
    if_statement -> if ( condition ) compound_statement else_part,
    else_part -> else compound_statement | E,
    while_statement -> while ( condition ) compound_statement,
    read_statement -> read ( IDENTIFIER ),
    write_statement -> write ( IDENTIFIER ) | write ( CONST ),
    term -> factor term',
    term' -> addop factor term' | E,
    addop -> + | -,
    factor -> IDENTIFIER | CONST,
    ar_expression -> term ar_expression',
    ar_expression' -> mulop term ar_expression' | E,
    mulop -> * | / | mod,
    condition -> ar_expression relop ar_expression,
    relop -> < | <= | == | != | => | >,
    add_expression -> term add_expression',
    add_expression' -> addop term add_expression' | E,
    subtract_expression -> term subtract_expression',
    subtract_expression' -> addop term subtract_expression' | E,
    multiply_expression -> factor multiply_expression',
    multiply_expression' -> mulop factor multiply_expression' | E,
    divide_expression -> factor divide_expression',
    divide_expression' -> mulop factor divide_expression' | E,
    mod_expression -> factor mod_expression',
    mod_expression' -> mulop factor mod_expression' | E,
}